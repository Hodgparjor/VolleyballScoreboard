doctype html
html(lang='en')
  head
    meta(charset='UTF-8')
    meta(name='viewport' content='width=device-width, initial-scale=1.0')
    title Volleyball Scoreboard
    link(href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css' rel='stylesheet')
    script(src='https://code.jquery.com/jquery-3.6.0.min.js')

  body
    .container
      h1 Volleyball Matches
      .row
        .col-md-12
          button#addMatchBtn.btn.btn-primary(data-bs-toggle='modal', data-bs-target='#addMatchModal') Add New Match
          select#filterStatus
            option(value="ALL") All
            option(value="PLANNED") Planned
            option(value="IN PROGRESS") In progress
            option(value="FINISHED") Finished
          table.table.table-striped
            thead
              tr
                th Date
                th Team A
                th Team B
                th Result
                th Status
                th Actions
            tbody#matchesList

    // Add new match modal
    .modal.fade#addMatchModal(tabindex='-1' aria-labelledby='addMatchModalLabel' aria-hidden='true')
      .modal-dialog
        .modal-content
          .modal-header
            h5.modal-title#addMatchModalLabel Add New Match
            button.btn-close(type='button', data-bs-dismiss='modal', aria-label='Close')
          .modal-body
            form#addMatchForm
              .mb-3
                label.form-label(for='teamA') Team A Name
                input.form-control#teamA(type='text' placeholder='Enter Team A Name' required)
              .mb-3
                label.form-label(for='teamB') Team B Name
                input.form-control#teamB(type='text' placeholder='Enter Team B Name' required)
              .mb-3
                label.form-label(for='matchDate') Match Date
                input.form-control#matchDate(type='datetime-local' required)
          .modal-footer
            button.btn.btn-secondary(type='button' data-bs-dismiss='modal') Close
            button.btn.btn-primary#submitMatch(type='submit' form='addMatchForm') Add Match

    script(src='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js')

script.
  document.addEventListener('DOMContentLoaded', function() {
    console.log("DOM fully loaded and parsed");
    updateMatchList();
    const socket = new WebSocket('ws://localhost:4000/');
    
    socket.addEventListener('message', function (event) {
      const data = JSON.parse(event.data);
      if(data.action === 'matchResultChanged') {
        updateMatchList();
      }
    });

    function openMatchDetails(matchId) {
      fetch(`/matches/match/${matchId}`, {
        method: 'GET'
      }).then(res => {
        if (res.ok) {
          location.assign(res.url);
        }
      })
    }

    filterStatus.addEventListener('change', function () {
      updateMatchList(filterStatus.value);
    });

    function updateMatchList(statusFilter = 'ALL') {
    // fetch matches via http
    fetch('/matches')
    .then(res => res.json())
    .then(data => {
      console.log("Matches fetched: ", data);  // Debugging log
      const matchesList = document.getElementById('matchesList');
      matchesList.innerHTML = "";
      data.forEach(match => {
          if(statusFilter == 'ALL' || match.status == statusFilter) {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${(new Date(match.date)).toLocaleString()}</td>
            <td>${match.teama_name}</td>
            <td>${match.teamb_name}</td>
            <td>${match.result}</td>
            <td>${match.status}</td>
            <td>
              <button class="btn btn-success btn-sm view-details" data-id="${match.id}">View</button>
              <button class="btn btn-info btn-sm copy-data" data-id="${match.id}">Copy</button>
              <button class="btn btn-danger btn-sm delete-match" data-id="${match.id}">Delete</button>
            </td>`;
          matchesList.appendChild(row);
        }
      });

      document.querySelectorAll('.view-details').forEach(button => {
        button.addEventListener('click', function() {
          const matchId = this.dataset.id;
          openMatchDetails(matchId);
        });
      });

      document.querySelectorAll('.copy-data').forEach(button => {
        button.addEventListener('click', function() {
          const matchId = this.dataset.id;
          copyMatchData(matchId);
        });
      });

      document.querySelectorAll('.delete-match').forEach(button => {
        button.addEventListener('click', function() {
          const matchId = this.dataset.id;
          deleteMatch(matchId);
        });
      });
    });
    }

    function copyMatchData(matchId) {
      fetch(`/matches/${matchId}`)
      .then(res => res.json())
      .then(data => {
        const teamAName = data.teama_name;
        const teamBName = data.teamb_name;
        const resultDetailed = data.resultdetailed.resD;
        const matchDate = new Date(data.date).toLocaleString();
        
        let formattedResult = "";
        
        let teamASetScores = [];
        let teamBSetScores = [];
        
        resultDetailed.forEach(setResult => {
          var [teamAScore, teamBScore] = setResult.split(":");
          if(teamBScore < 10) { // ensure proper spacing, add space if score has only one digit to properly fit with two digit scores
            teamBScore = " " + teamBScore;
          }
          if(teamAScore < 10) {
            teamAScore = " " + teamAScore;
          }
          teamASetScores.push(teamAScore);
          teamBSetScores.push(teamBScore);
        });

        const teamAWins = data.result.split(":")[0]; 
        const teamBWins = data.result.split(":")[1]; 

        // Adjust header for team name length
        const longestTeamNameLength = Math.max(teamAName.length, teamBName.length);
        const spacesBeforeScores = ' '.repeat(longestTeamNameLength + 1);
        let header = "";
        for (let i = 1; i <= resultDetailed.length; i++) {
          header += `S${i} | `;
        }
        header += "Total"
        formattedResult += spacesBeforeScores + header + "\n";

        // Add teams
        formattedResult += `${teamAName.padEnd(longestTeamNameLength)} ${teamASetScores.join(" | ")} | ${teamAWins}\n`;
        formattedResult += `${teamBName.padEnd(longestTeamNameLength)} ${teamBSetScores.join(" | ")} | ${teamBWins}\n`;
        formattedResult += `${matchDate}\n`;

        navigator.clipboard.writeText(formattedResult)
        .then(() => {
          alert("Match data copied to clipboard!");
        })
        .catch(err => {
          console.error("Failed to copy match data: ", err);
        });
      });
    }

    //- function deleteMatch(matchId) {
    //-   fetch(`/matches/${matchId}`, {
    //-     method: 'DELETE'
    //-   })
    //-   .then(res => {
    //-     if (res.ok) {
    //-       alert('Match deleted!');
    //-       location.reload(); 
    //-     } else {
    //-       alert('Failed to delete match.');
    //-     }
    //-   });
    //- }

    function deleteMatch(id) {
      if (confirm('Delete this match?')) {
        fetch(`/matches/${id}`, { method: 'DELETE' })
          .then(() => updateMatchList(filterStatus.value));
      }
    }

    const addMatchForm = document.getElementById('addMatchForm');
    if (addMatchForm) {
      addMatchForm.addEventListener('submit', function (e) {
        e.preventDefault();
        console.log("Form submitted");  // Check if submit event is triggered
        
        const teamA = document.getElementById('teamA').value;
        const teamB = document.getElementById('teamB').value;
        const matchDate = document.getElementById('matchDate').value;
        var status;

        if( new Date(matchDate).getTime() < new Date().getTime()) {
          status = "IN PROGRESS";
        } else {
          status = "PLANNED";
        }

        const newMatch = {
          teamA_name: teamA,
          teamB_name: teamB,
          date: matchDate,
          result: '0:0', // Default result
          resultDetailed: {
            resD: ['0:0']
          },
          status: status
        };

        fetch('/matches', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(newMatch)
        })
        .then(res => res.json())
        .then(data => {
          console.log("Match added: ", data);  // Log response from server
          const row = document.createElement('tr');
          row.innerHTML = `<td>${(new Date(data.date)).toLocaleString()}</td><td>${data.teama_name}</td><td>${data.teamb_name}</td><td>${data.result}</td><td>${data.status}</td>`;
          const matchesList = document.getElementById('matchesList');
          matchesList.appendChild(row);

          const modal = bootstrap.Modal.getInstance(document.getElementById('addMatchModal'));
          document.getElementById("addMatchForm").reset()
          modal.hide();
          updateMatchList(filterStatus.value);
        })
        .catch(error => {
          console.error("Error adding match: ", error);  // Log error, if any
        });
      });
    } else {
      console.error("Add match form not found!");  // Log if form isn't found
    }
  });
