doctype html
html(lang='en')
  head
    meta(charset='UTF-8')
    meta(name='viewport' content='width=device-width, initial-scale=1.0')
    title Match Details
    link(href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css' rel='stylesheet')
    script(src='https://code.jquery.com/jquery-3.6.0.min.js')

  body
    .container
      h1.text-center Match in Progress
      
      // Sekcja drużyn
      .row.mb-4
        .col-md-5.text-center
          h3#teamAName Team A
          h4#teamASets 0 Sets Won
        .col-md-2.text-center
          button.btn.btn-warning#swapSidesBtn Swap Sides
        .col-md-5.text-center
          h3#teamBName Team B
          h4#teamBSets 0 Sets Won

      // Wynik w bieżącym secie
      .row.mb-4
        .col-md-5.text-center
          h1#teamACurrentSetScore
            button.btn.btn-secondary.btn-lg#teamAIncrement 0
          button.btn.btn-danger#teamADecrement -1
        .col-md-2.text-center
          h5#matchStatus Status: PLANNED
        .col-md-5.text-center
          h1#teamBCurrentSetScore
            button.btn.btn-secondary.btn-lg#teamBIncrement 0
          button.btn.btn-danger#teamBDecrement -1

      // Czas trwania meczu i seta
      .row.mb-4
        .col-md-4.text-center
          h5#matchDurationLabel Match Duration
          h3#matchDuration 00:00:00
        .col-md-4.text-center
          h5#setDurationLabel Set Duration
          h3#setDuration 00:00:00
        .col-md-4.text-center
          h5 Current Time
          h3#currentTime

      // Przyciski zakończenia seta i meczu
      .row.mb-4
        .col-md-6.text-center
          button.btn.btn-primary#endSetBtn End Set
        .col-md-6.text-center
          button.btn.btn-danger#endMatchBtn End Match

      // Powrót
      .row.mb-4
        .col-md-12.text-center
          button.btn.btn-secondary#closeViewBtn Close and Return

    script(src='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js')
    //- script(src='/js/matchDetails')
script.
  document.addEventListener('DOMContentLoaded', function () {
  const socket = new WebSocket('ws://localhost:4000/');
  console.log("DOM loaded");
  
  // tmp data holding variables
  let result;
  let status;
  let resultDetailed;
  let matchData;
  //- let swapped = false;

  // Time variables
  let matchStartTime = null;
  let setStartTime = null;
  
  socket.addEventListener('message', function (event) {
    eventData = JSON.parse(event.data);
    console.log("WebSocket message received. Action: " + eventData.action);

    if(eventData.action == 'matchDataChanged') {
      if(!matchData || matchData.id == eventData.id) {
        matchData = eventData;
        result = matchData.result;
        resultDetailed = matchData.resultdetailed;
        status = matchData.status;
        if(!matchData.swapped) {
          matchData.swapped = false;
        }
        let currentSetResult = matchData.resultdetailed.resD[matchData.resultdetailed.resD.length - 1]
        document.getElementById('matchStatus').innerHTML = matchData.status;
        refreshTeamsUI()

        if (matchData.status === 'IN PROGRESS' && !matchStartTime) {
          // Set times if match started, and no time is recorded
          matchStartTime = new Date();
          setStartTime = new Date(); 
        } else {
          if (matchData.matchStartTime) {
            matchStartTime = new Date(matchData.matchStartTime);
          }
          if (matchData.setStartTime) {
            setStartTime = new Date(matchData.setStartTime);
          }
        }

        checkSetEnd();
        checkMatchEnd();

        // Disable controlls for finished match
        if (matchData.status === 'FINISHED') {
          document.querySelectorAll('button, input, textarea').forEach(el => el.disabled = true);
          document.getElementById('closeViewBtn').disabled = false;
        }
      }
    }

  });

  // Increment score for specified team
  function updateScore(team, increment) {
    // If not started yet, start match upon first point
    if(parseInt(document.getElementById(`teamAIncrement`).innerHTML) == 0 && parseInt(document.getElementById(`teamBIncrement`).innerHTML) == 0 && 
      matchData.result == "0:0" &&  document.getElementById('matchStatus').innerHTML == "PLANNED") {
        document.getElementById('matchStatus').innerHTML = "IN PROGRESS";
        matchData.status = "IN PROGRESS"; 
        matchStartTime = new Date();
        setStartTime = new Date();
        matchData.matchStartTime = matchStartTime.toISOString();
        matchData.setStartTime = setStartTime.toISOString();
      }
      
    const currentScore = parseInt(document.getElementById(`${team}Increment`).innerHTML);
    const newScore = currentScore + increment;
    console.log("incrementing " + team + " score " + currentScore + " to " + newScore);
    

    // Update score and send info to websocket client, ensure score does not go below zero
    if (newScore >= 0 && matchData.result.split(":")[0] != "3" && matchData.result.split(":")[1] != "3") {
      const teamAOldScore = parseInt(document.getElementById('teamAIncrement').innerHTML);
      const teamBOldScore = parseInt(document.getElementById('teamBIncrement').innerHTML);
      document.getElementById(`${team}Increment`).innerHTML = newScore;
      const teamAScore = parseInt(document.getElementById('teamAIncrement').innerHTML);
      const teamBScore = parseInt(document.getElementById('teamBIncrement').innerHTML);
      if(matchData.swapped) { // Reverse score when saving if sides are swapped
        matchData.resultdetailed.resD[matchData.resultdetailed.resD.length - 1] = `${teamBScore}:${teamAScore}`;
      } else {
        matchData.resultdetailed.resD[matchData.resultdetailed.resD.length - 1] = `${teamAScore}:${teamBScore}`;
      }
      if(teamAOldScore < 8 && teamBOldScore < 8 && (teamAScore == 8 || teamBScore == 8) && matchData.result == "2:2") {
        swapSides();
      }
      emitUpdateMatch();
      checkSetEnd();
    }
  }

  function checkSetEnd() {
    const teamAScore = parseInt(document.getElementById('teamAIncrement').innerHTML);
    const teamBScore = parseInt(document.getElementById('teamBIncrement').innerHTML);
    const teamASets = parseInt(document.getElementById('teamASets').innerHTML);
    const teamBSets = parseInt(document.getElementById('teamBSets').innerHTML);

    if ((teamAScore >= 25 || teamBScore >= 25 || (teamASets == 2 && teamBSets == 2 && (teamAScore >= 15 || teamBScore >= 15))) && Math.abs(teamAScore - teamBScore) >= 2 && teamASets < 3 && teamBSets < 3) {
      document.getElementById('endSetBtn').disabled = false;
    } else {
      document.getElementById('endSetBtn').disabled = true;
    }
  }

  function endSet() {
    const teamAScore = parseInt(document.getElementById('teamAIncrement').innerHTML);
    const teamBScore = parseInt(document.getElementById('teamBIncrement').innerHTML);
    const teamASets = parseInt(document.getElementById('teamASets').innerHTML);
    const teamBSets = parseInt(document.getElementById('teamBSets').innerHTML);
    console.log("Ending set, result is " + teamAScore + ":" + teamBScore);


    if (((teamAScore >= 25 || teamBScore >= 25) || (teamASets == 2 && teamBSets == 2 && (teamAScore >= 15 || teamBScore >= 15))) && Math.abs(teamAScore - teamBScore) >= 2) {
      // Zakończ set, zaktualizuj wynik szczegółowy
      if(teamAScore > teamBScore) {
        document.getElementById('teamASets').innerHTML = teamASets + 1;
      } else {
        document.getElementById('teamBSets').innerHTML = teamBSets + 1;
      }
      result = document.getElementById('teamASets').innerHTML + ":" + document.getElementById('teamBSets').innerHTML;

      // Add new set if match is not finished
      if(matchData.resultdetailed.resD.length < 5 && matchData.result.split(":")[0] < 3 && matchData.result.split(":")[1] < 3) {
        matchData.resultdetailed.resD.push(`0:0`);
        setStartTime = new Date();
        matchData.setStartTime = setStartTime.toISOString();
        swapSides();
      }
      matchData.result = result;
      matchData.resultdetailed = resultDetailed;
      

      // Reset scores for new set
      document.getElementById('teamAIncrement').innerHTML = 0;
      document.getElementById('teamBIncrement').innerHTML = 0;
      checkSetEnd();
      checkMatchEnd();
      
      // update through websocket
      emitUpdateMatch();
      socket.send(JSON.stringify({
        action: 'matchResultChanged'
      }));
    }
  }

  // Swap teams
  document.getElementById('swapSidesBtn').addEventListener('click', function () {
    swapSides();
  });

  function swapSides() {
    matchData.swapped = !matchData.swapped;
    refreshTeamsUI()
  }

  function refreshTeamsUI() {
    if (matchData.swapped) {
      document.getElementById('teamAName').innerHTML = matchData.teamb_name;
      document.getElementById('teamBName').innerHTML = matchData.teama_name;

      document.getElementById('teamASets').innerHTML = result.split(":")[1];
      document.getElementById('teamBSets').innerHTML = result.split(":")[0];

      let currentSetResult = matchData.resultdetailed.resD[matchData.resultdetailed.resD.length - 1];
      document.getElementById('teamAIncrement').innerHTML = currentSetResult.split(":")[1];
      document.getElementById('teamBIncrement').innerHTML = currentSetResult.split(":")[0];
    } else {
      document.getElementById('teamAName').innerHTML = matchData.teama_name;
      document.getElementById('teamBName').innerHTML = matchData.teamb_name;

      document.getElementById('teamASets').innerHTML = result.split(":")[0];
      document.getElementById('teamBSets').innerHTML = result.split(":")[1];

      let currentSetResult = matchData.resultdetailed.resD[matchData.resultdetailed.resD.length - 1];
      document.getElementById('teamAIncrement').innerHTML = currentSetResult.split(":")[0];
      document.getElementById('teamBIncrement').innerHTML = currentSetResult.split(":")[1];
    }
  }

  function checkMatchEnd() {
    const teamAWins = parseInt(document.getElementById('teamASets').innerHTML);
    const teamBWins = parseInt(document.getElementById('teamBSets').innerHTML);
    if (teamAWins === 3 || teamBWins === 3) { 
      document.getElementById('endMatchBtn').disabled = false;
    } else {
      document.getElementById('endMatchBtn').disabled = true;
    }
  }

  function endMatch() {
    const teamAWins = parseInt(document.getElementById('teamASets').innerHTML);
    const teamBWins = parseInt(document.getElementById('teamBSets').innerHTML);
    if (teamAWins === 3 || teamBWins === 3) {
      document.getElementById('matchStatus').innerHTML = 'FINISHED';
      matchData.result = result = `${teamAWins}:${teamBWins}`;
      matchData.status = 'FINISHED';
      emitUpdateMatch();
      socket.send(JSON.stringify({
        action: 'matchResultChanged'
      }));

      // lock all controls except returning to match list
      document.querySelectorAll('input, textarea, button').forEach(el => el.disabled = true);
      document.getElementById('closeViewBtn').disabled = false;
    }
  }

  function emitUpdateMatch() {
        socket.send(JSON.stringify({
        action: 'matchDataChanged',
        date: matchData.date,
        teama_name: matchData.teama_name,
        teamb_name: matchData.teamb_name,
        id: matchData.id,
        result: matchData.result,
        resultdetailed: matchData.resultdetailed,
        status: matchData.status,
        matchStartTime: matchData.matchStartTime,
        setStartTime: matchData.setStartTime,
        swapped: matchData.swapped
      }));
  }
  

  // end set/match buttons
  document.getElementById('endSetBtn').addEventListener('click', () => endSet());
  document.getElementById('endMatchBtn').addEventListener('click', () => endMatch());

  // score inc/dec buttons
  document.getElementById('teamAIncrement').addEventListener('click', () => updateScore('teamA', 1));
  document.getElementById('teamBIncrement').addEventListener('click', () => updateScore('teamB', 1));
  document.getElementById('teamADecrement').addEventListener('click', () => updateScore('teamA', -1));
  document.getElementById('teamBDecrement').addEventListener('click', () => updateScore('teamB', -1));

  // Back to match list view
  document.getElementById('closeViewBtn').addEventListener('click', () => window.location.href = "/")

  // Timers
  setInterval(updateDateTime, 1000);

  function updateDateTime() {
    const now = new Date();
    const currentDateTime = now.toLocaleString();
    document.getElementById("currentTime").innerHTML = currentDateTime;

    if(matchData.status == "FINISHED") {
      setEmptyTimeLabels(); 
    } else {
      // Update match time
      if (matchStartTime) {
        const matchElapsed = now - matchStartTime;
        document.getElementById("matchDuration").innerHTML = formatTime(matchElapsed);
      }

      // Update set time
      if (setStartTime) {
        const setElapsed = now - setStartTime;
        document.getElementById("setDuration").innerHTML = formatTime(setElapsed);
      }
      if(matchData.status == "IN PROGRESS" && (setStartTime || matchStartTime)) {
        emitUpdateMatch()
      }
    }

    
  }

// "hide" set and match time labels
  function setEmptyTimeLabels() {
      document.getElementById("matchDuration").innerHTML = "";
      document.getElementById("matchDurationLabel").innerHTML = "";
      document.getElementById("setDuration").innerHTML = "";
      document.getElementById("setDurationLabel").innerHTML = "";
  }

// Format into hh:mm:ss
  function formatTime(duration) {
    const totalSeconds = Math.floor(duration / 1000);
    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor((totalSeconds % 3600) / 60);
    const seconds = totalSeconds % 60;
    return `${pad(hours)}:${pad(minutes)}:${pad(seconds)}`;
  }

  function pad(num) {
    return num.toString().padStart(2, '0');
  }

  });


